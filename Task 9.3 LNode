import javax.swing.JOptionPane;

/** LinkedList is an algorithm that stores data dynamically as it uses address.
Storing may happen at the beginning, in the middle and at the last. Same goes to deletion.
It does NOT store the data in a sequential manner, instead it uses the Node (data, address) that
link between them to forming a chain or link list.
@author Abrienne Capricho
*/

public class LNode<Object> {
    private Object data;
    private LNode next; // pointer to the next node
    private LNode head; // pointer at first/head node

    public void error_message(String msg) {
        JOptionPane.showMessageDialog(null, msg, "Error", JOptionPane.ERROR_MESSAGE);
    }

    public LNode() {
        next = head = null;
    }

    public boolean isEmpty() {
        return head == null;
    }

    public void addAtFirst(Object value) {
        LNode newNode = new LNode();
        if (isEmpty()) {
            newNode.data = value;
            newNode.next = null;
            head = newNode;
        } else {
            newNode.data = value;
            newNode.next = head;
            head = newNode;
        }
    }

    public String traverse() {
        if (isEmpty()) {
            return "List is Empty";
        } else {
            String hold = "head Node\n";  
            LNode link = head;
            while (link != null) {
                hold += "|" + link + "|\n";  
                link = link.next;
            }
            hold += "null";  
            return hold;
        }
    }


    public void addAtLast(Object value) {
        if (isEmpty()) {
            addAtFirst(value);
        } else {
            LNode link = head;
            while (link.next != null) {
                link = link.next;
            }
            LNode newNode = new LNode();
            newNode.data = value;
            newNode.next = null;
            link.next = newNode;
        }
    }

    public int currentSize() {
        int counter = 1;
        if (isEmpty()) {
            error_message("List is empty");
        } else {
            LNode link = head;
            while (link.next != null) {
                link = link.next;
                counter++;
            }
        }
        return counter;
    }

    public void addAtPosition(Object value, int position) {
        if (isEmpty() || position == 1) {
            addAtFirst(value);  // Add to the beginning
        } else if (position < 1 || position > currentSize() + 1) {
            error_message(position + " is NOT valid");
        } else {
            LNode visit = head;
            for (int i = 1; i < position - 1; i++) {
                visit = visit.next;
            }
            LNode newNode = new LNode();
            newNode.data = value;
            newNode.next = visit.next;
            visit.next = newNode;
        }
    }

    
    public void deleteAtFirst() {
    	if(isEmpty()) {
    		error_message("Deleting Not Allowed. Linked List is empty.");
    	} else {
    		LNode link = head;
    		head=link.next;
    		System.out.println("Deleting is Successful!");
    	}
    }
    
    public void deleteAtLast() {
        if (isEmpty()) {
            error_message("Deleting Not Allowed. Linked List is empty.");
        } else {
            LNode visit, link;
            visit = link = head; // Fill in the blank
            while (visit.next != null) {
            	visit = visit.next;// Fill in the blank
            }
            while (link.next != visit) { // Fill in the blank
                link = link.next;
            }
            link.next = null; // Fill in the blank
            System.out.println("Deleting is Successful!");
        }
    }
  
    public void deleteAtPosition(int position) {
        if (isEmpty()) {
            error_message("The list is empty. Try adding a value.");
        } else if (position == 1) {
            deleteAtFirst();  // Handle position 1 case
        } else if (position < 1 || position > currentSize()) {
            error_message("Position is NOT valid.");
        } else {
            LNode previous = head;
            for (int i = 1; i < position - 1; i++) {
                previous = previous.next;
            }
            LNode nodeToDelete = previous.next;
            previous.next = nodeToDelete.next;
            System.out.println("Node at position " + position + " deleted.");
        }
    }

    
    public Object getFirst() {
    	if(isEmpty()) {
    		error_message("The list is empty. No first element available.");
    		return null;
    	}else {
    		return (Object) head.data;    	}
    }

    public Object getLast() {
        if (isEmpty()) {
            error_message("The list is empty. No last element available.");
            return null; 
        } else {
            LNode link = head;
            while (link.next != null) {
                link = link.next;
            }
            return (Object) link.data;  // Return the last node's data
        }
    }

    public void addInMiddle(Object value) {
        int middle = currentSize() / 2 + 1;
        addAtPosition(value, middle);
    }

    public void deleteInMiddle() {
        int middle = (currentSize() + 1) / 2;
        deleteAtPosition(middle);
    }

    
    public void deleteValue(Object value) {
        int index = indexAt(value);           
        if (index != -1) {
            deleteAtPosition(index);          
        } else {
            error_message("Value not found"); 
        }
    }
    
    public int indexAt(Object value) {
        if (isEmpty()) return -1;            
        LNode link = head;
        int index = 1;                         
        while (link != null) {
            if (link.data.equals(value)) {     
                return index;                 
            }
            link = link.next;
            index++;
        }
        return -1;                
    }
    
    public Object get(int position) {
        if (isEmpty() || position < 1 || position > currentSize()) {
            error_message("Invalid position"); 
            return null;
        }
        LNode link = head;
        int ctr = 1;                           
        while (ctr != position) {             
            link = link.next;
            ctr++;
        }
        return (Object) link.data;             
    }
    
    public Object getNode(int position) {
        Object value = null;
        if (isEmpty()) {
            error_message("The list is empty. Try to add a value");
        } else {
            LNode<Object> pointer = head;
            int ctr = 0;
            while (ctr != position) {
                pointer = pointer.next;
                ctr++;
            }
            value = pointer.data;
        }
        return value;
    }
    
    public String traverseNode() {
        String hold = "";  
        if (isEmpty()) {
            hold = "List is empty";  
        } else {
            LNode<Student> pointer = head;
            int ctr = 0;
            while (pointer != null) {
                hold += pointer.data.getStudent() + "\n";  
                pointer = pointer.next;  
            }
        }
        return hold;
    }

}
